// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/kratos/selfservice/strategy/sms (interfaces: NotificationClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationClient is a mock of NotificationClient interface.
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient.
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance.
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockNotificationClient) Send(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNotificationClientMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationClient)(nil).Send), arg0, arg1, arg2)
}
