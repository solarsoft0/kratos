// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/kratos/selfservice/strategy/sms (interfaces: CodePersister)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	sms "github.com/ory/kratos/selfservice/strategy/sms"
)

// MockCodePersister is a mock of CodePersister interface.
type MockCodePersister struct {
	ctrl     *gomock.Controller
	recorder *MockCodePersisterMockRecorder
}

// MockCodePersisterMockRecorder is the mock recorder for MockCodePersister.
type MockCodePersisterMockRecorder struct {
	mock *MockCodePersister
}

// NewMockCodePersister creates a new mock instance.
func NewMockCodePersister(ctrl *gomock.Controller) *MockCodePersister {
	mock := &MockCodePersister{ctrl: ctrl}
	mock.recorder = &MockCodePersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodePersister) EXPECT() *MockCodePersisterMockRecorder {
	return m.recorder
}

// CreateSmsCode mocks base method.
func (m *MockCodePersister) CreateSmsCode(arg0 context.Context, arg1 *sms.Code) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSmsCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSmsCode indicates an expected call of CreateSmsCode.
func (mr *MockCodePersisterMockRecorder) CreateSmsCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmsCode", reflect.TypeOf((*MockCodePersister)(nil).CreateSmsCode), arg0, arg1)
}

// FindSmsCode mocks base method.
func (m *MockCodePersister) FindSmsCode(arg0 context.Context, arg1 uuid.UUID, arg2 time.Time) (*sms.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSmsCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sms.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSmsCode indicates an expected call of FindSmsCode.
func (mr *MockCodePersisterMockRecorder) FindSmsCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSmsCode", reflect.TypeOf((*MockCodePersister)(nil).FindSmsCode), arg0, arg1, arg2)
}
